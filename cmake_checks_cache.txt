###############################################################
# Dump of all cache variables that started with CMAKE_*
###############################################################
set(CMAKE_ADDR2LINE "CMAKE_ADDR2LINE-NOTFOUND" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_ADDR2LINE)
set(CMAKE_AR "/usr/bin/ar" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_AR)
set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ...")
set(CMAKE_CHECKS_CACHE_FILE "/Users/runner/work/SDL/SDL/build/cmake_checks_cache.txt" CACHE FILEPATH "CMake checks cache file")
set(CMAKE_COLOR_MAKEFILE "ON" CACHE BOOL "Enable/Disable color output during build.")
mark_as_advanced(CMAKE_COLOR_MAKEFILE)
set(CMAKE_C_COMPILER "/usr/bin/cc" CACHE FILEPATH "C compiler")
mark_as_advanced(CMAKE_C_COMPILER)
set(CMAKE_C_FLAGS "" CACHE STRING "Flags used by the C compiler during all build types.")
mark_as_advanced(CMAKE_C_FLAGS)
set(CMAKE_C_FLAGS_DEBUG "-g" CACHE STRING "Flags used by the C compiler during DEBUG builds.")
mark_as_advanced(CMAKE_C_FLAGS_DEBUG)
set(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG" CACHE STRING "Flags used by the C compiler during MINSIZEREL builds.")
mark_as_advanced(CMAKE_C_FLAGS_MINSIZEREL)
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG" CACHE STRING "Flags used by the C compiler during RELEASE builds.")
mark_as_advanced(CMAKE_C_FLAGS_RELEASE)
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG" CACHE STRING "Flags used by the C compiler during RELWITHDEBINFO builds.")
mark_as_advanced(CMAKE_C_FLAGS_RELWITHDEBINFO)
set(CMAKE_DLLTOOL "CMAKE_DLLTOOL-NOTFOUND" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_DLLTOOL)
set(CMAKE_EXECUTABLE_FORMAT "MACHO" CACHE INTERNAL "Executable file format")
set(CMAKE_EXE_LINKER_FLAGS "" CACHE STRING "Flags used by the linker during all build types.")
mark_as_advanced(CMAKE_EXE_LINKER_FLAGS)
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "" CACHE STRING "Flags used by the linker during DEBUG builds.")
mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_DEBUG)
set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "" CACHE STRING "Flags used by the linker during MINSIZEREL builds.")
mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL)
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "" CACHE STRING "Flags used by the linker during RELEASE builds.")
mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_RELEASE)
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "" CACHE STRING "Flags used by the linker during RELWITHDEBINFO builds.")
mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO)
set(CMAKE_EXPORT_COMPILE_COMMANDS "" CACHE BOOL "Enable/Disable output of compile commands during generation.")
mark_as_advanced(CMAKE_EXPORT_COMPILE_COMMANDS)
set(CMAKE_EXTRA_GENERATOR "" CACHE INTERNAL "Name of external makefile project generator.")
set(CMAKE_GENERATOR "Unix Makefiles" CACHE INTERNAL "Name of generator.")
set(CMAKE_GENERATOR_INSTANCE "" CACHE INTERNAL "Generator instance identifier.")
set(CMAKE_GENERATOR_PLATFORM "" CACHE INTERNAL "Name of generator platform.")
set(CMAKE_GENERATOR_TOOLSET "" CACHE INTERNAL "Name of generator toolset.")
set(CMAKE_HOME_DIRECTORY "/Users/runner/work/SDL/SDL" CACHE INTERNAL "Source directory with the top level CMakeLists.txt file for this project")
set(CMAKE_INSTALL_NAME_TOOL "/usr/bin/install_name_tool" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_INSTALL_NAME_TOOL)
set(CMAKE_INSTALL_PREFIX "/usr/local" CACHE PATH "Install path prefix, prepended onto install directories.")
set(CMAKE_LINKER "/usr/bin/ld" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_LINKER)
set(CMAKE_MAKE_PROGRAM "/usr/bin/make" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_MAKE_PROGRAM)
set(CMAKE_MODULE_LINKER_FLAGS "" CACHE STRING "Flags used by the linker during the creation of modules during all build types.")
mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS)
set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "" CACHE STRING "Flags used by the linker during the creation of modules during DEBUG builds.")
mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_DEBUG)
set(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL "" CACHE STRING "Flags used by the linker during the creation of modules during MINSIZEREL builds.")
mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL)
set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "" CACHE STRING "Flags used by the linker during the creation of modules during RELEASE builds.")
mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_RELEASE)
set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "" CACHE STRING "Flags used by the linker during the creation of modules during RELWITHDEBINFO builds.")
mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO)
set(CMAKE_NM "/usr/bin/nm" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_NM)
set(CMAKE_OBJCOPY "CMAKE_OBJCOPY-NOTFOUND" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_OBJCOPY)
set(CMAKE_OBJDUMP "/usr/bin/objdump" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_OBJDUMP)
set(CMAKE_OSX_ARCHITECTURES "arm64" CACHE STRING "Build architectures for OSX")
set(CMAKE_OSX_DEPLOYMENT_TARGET "" CACHE STRING "Minimum OS X version to target for deployment (at runtime); newer APIs weak linked. Set to empty string for default value.")
set(CMAKE_PLATFORM_INFO_INITIALIZED "1" CACHE INTERNAL "Platform information initialized")
set(CMAKE_RANLIB "/usr/bin/ranlib" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_RANLIB)
set(CMAKE_READELF "CMAKE_READELF-NOTFOUND" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_READELF)
set(CMAKE_SHARED_LINKER_FLAGS "" CACHE STRING "Flags used by the linker during the creation of shared libraries during all build types.")
mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS)
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "" CACHE STRING "Flags used by the linker during the creation of shared libraries during DEBUG builds.")
mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_DEBUG)
set(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "" CACHE STRING "Flags used by the linker during the creation of shared libraries during MINSIZEREL builds.")
mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL)
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "" CACHE STRING "Flags used by the linker during the creation of shared libraries during RELEASE builds.")
mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_RELEASE)
set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "" CACHE STRING "Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds.")
mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO)
set(CMAKE_SKIP_INSTALL_RPATH "NO" CACHE BOOL "If set, runtime paths are not added when installing shared libraries, but are added when building.")
mark_as_advanced(CMAKE_SKIP_INSTALL_RPATH)
set(CMAKE_SKIP_RPATH "NO" CACHE BOOL "If set, runtime paths are not added when using shared libraries.")
mark_as_advanced(CMAKE_SKIP_RPATH)
set(CMAKE_STATIC_LINKER_FLAGS "" CACHE STRING "Flags used by the linker during the creation of static libraries during all build types.")
mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS)
set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "" CACHE STRING "Flags used by the linker during the creation of static libraries during DEBUG builds.")
mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_DEBUG)
set(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL "" CACHE STRING "Flags used by the linker during the creation of static libraries during MINSIZEREL builds.")
mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL)
set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "" CACHE STRING "Flags used by the linker during the creation of static libraries during RELEASE builds.")
mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_RELEASE)
set(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO "" CACHE STRING "Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds.")
mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO)
set(CMAKE_STRIP "/usr/bin/strip" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_STRIP)
set(CMAKE_TAPI "/usr/bin/tapi" CACHE FILEPATH "Path to a program.")
mark_as_advanced(CMAKE_TAPI)
set(CMAKE_UNAME "/usr/bin/uname" CACHE INTERNAL "uname command")
set(CMAKE_VERBOSE_MAKEFILE "FALSE" CACHE BOOL "If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.")
mark_as_advanced(CMAKE_VERBOSE_MAKEFILE)
###############################################################
set(CHECK_CPU_ARCHITECTURE_X86 "" CACHE INTERNAL "Test CHECK_CPU_ARCHITECTURE_X86")
set(CHECK_CPU_ARCHITECTURE_X64 "" CACHE INTERNAL "Test CHECK_CPU_ARCHITECTURE_X64")
set(CHECK_CPU_ARCHITECTURE_ARM32 "" CACHE INTERNAL "Test CHECK_CPU_ARCHITECTURE_ARM32")
set(CHECK_CPU_ARCHITECTURE_ARM64 "1" CACHE INTERNAL "Test CHECK_CPU_ARCHITECTURE_ARM64")
set(CHECK_CPU_ARCHITECTURE_LOONGARCH64 "" CACHE INTERNAL "Test CHECK_CPU_ARCHITECTURE_LOONGARCH64")
set(HAVE_GCC_WALL "1" CACHE INTERNAL "Test HAVE_GCC_WALL")
set(HAVE_GCC_WUNDEF "1" CACHE INTERNAL "Test HAVE_GCC_WUNDEF")
set(HAVE_GCC_NO_STRICT_ALIASING "1" CACHE INTERNAL "Test HAVE_GCC_NO_STRICT_ALIASING")
set(HAVE_GCC_WDOCUMENTATION "1" CACHE INTERNAL "Test HAVE_GCC_WDOCUMENTATION")
set(HAVE_GCC_WDOCUMENTATION_UNKNOWN_COMMAND "1" CACHE INTERNAL "Test HAVE_GCC_WDOCUMENTATION_UNKNOWN_COMMAND")
set(HAVE_GCC_COMMENT_BLOCK_COMMANDS "1" CACHE INTERNAL "Test HAVE_GCC_COMMENT_BLOCK_COMMANDS")
set(HAVE_GCC_ATOMICS "1" CACHE INTERNAL "Test HAVE_GCC_ATOMICS")
set(HAVE_GCC_FVISIBILITY "1" CACHE INTERNAL "Test HAVE_GCC_FVISIBILITY")
set(HAVE_GCC_WSHADOW "1" CACHE INTERNAL "Test HAVE_GCC_WSHADOW")
set(HAVE_GCC_WUNUSED_LOCAL_TYPEDEFS "1" CACHE INTERNAL "Test HAVE_GCC_WUNUSED_LOCAL_TYPEDEFS")
set(HAVE_WNO_ERROR_DEPRECATED_DECLARATIONS "1" CACHE INTERNAL "Test HAVE_WNO_ERROR_DEPRECATED_DECLARATIONS")
set(HAVE_IMMINTRIN_H "" CACHE INTERNAL "Have include immintrin.h")
set(HAVE_ALTIVEC_H_HDR "" CACHE INTERNAL "Test HAVE_ALTIVEC_H_HDR")
set(CPU_SUPPORTS_ALTIVEC "" CACHE INTERNAL "Test CPU_SUPPORTS_ALTIVEC")
set(HAVE_CTYPE_H "1" CACHE INTERNAL "Have include ctype.h")
set(HAVE_FLOAT_H "1" CACHE INTERNAL "Have include float.h")
set(HAVE_ICONV_H "1" CACHE INTERNAL "Have include iconv.h")
set(HAVE_INTTYPES_H "1" CACHE INTERNAL "Have include inttypes.h")
set(HAVE_LIMITS_H "1" CACHE INTERNAL "Have include limits.h")
set(HAVE_MALLOC_H "" CACHE INTERNAL "Have include malloc.h")
set(HAVE_MATH_H "1" CACHE INTERNAL "Have include math.h")
set(HAVE_MEMORY_H "1" CACHE INTERNAL "Have include memory.h")
set(HAVE_SIGNAL_H "1" CACHE INTERNAL "Have include signal.h")
set(HAVE_STDARG_H "1" CACHE INTERNAL "Have include stdarg.h")
set(HAVE_STDDEF_H "1" CACHE INTERNAL "Have include stddef.h")
set(HAVE_STDINT_H "1" CACHE INTERNAL "Have include stdint.h")
set(HAVE_STDIO_H "1" CACHE INTERNAL "Have include stdio.h")
set(HAVE_STDLIB_H "1" CACHE INTERNAL "Have include stdlib.h")
set(HAVE_STRING_H "1" CACHE INTERNAL "Have include string.h")
set(HAVE_STRINGS_H "1" CACHE INTERNAL "Have include strings.h")
set(HAVE_SYS_TYPES_H "1" CACHE INTERNAL "Have include sys/types.h")
set(HAVE_WCHAR_H "1" CACHE INTERNAL "Have include wchar.h")
set(STDC_HEADERS "1" CACHE INTERNAL "Have include stddef.h;stdarg.h;stdlib.h;string.h;stdio.h;wchar.h;float.h")
set(HAVE_M_PI "1" CACHE INTERNAL "Have symbol M_PI")
set(HAVE_MPROTECT "1" CACHE INTERNAL "Test HAVE_MPROTECT")
set(HAVE_STRTOD "1" CACHE INTERNAL "Have symbol strtod")
set(HAVE_MALLOC "1" CACHE INTERNAL "Have symbol malloc")
set(HAVE_CALLOC "1" CACHE INTERNAL "Have symbol calloc")
set(HAVE_REALLOC "1" CACHE INTERNAL "Have symbol realloc")
set(HAVE_FREE "1" CACHE INTERNAL "Have symbol free")
set(HAVE_GETENV "1" CACHE INTERNAL "Have symbol getenv")
set(HAVE_SETENV "1" CACHE INTERNAL "Have symbol setenv")
set(HAVE_PUTENV "1" CACHE INTERNAL "Have symbol putenv")
set(HAVE_UNSETENV "1" CACHE INTERNAL "Have symbol unsetenv")
set(HAVE_BSEARCH "1" CACHE INTERNAL "Have symbol bsearch")
set(HAVE_QSORT "1" CACHE INTERNAL "Have symbol qsort")
set(HAVE_ABS "1" CACHE INTERNAL "Have symbol abs")
set(HAVE_BCOPY "1" CACHE INTERNAL "Have symbol bcopy")
set(HAVE_MEMSET "1" CACHE INTERNAL "Have symbol memset")
set(HAVE_MEMCPY "1" CACHE INTERNAL "Have symbol memcpy")
set(HAVE_MEMMOVE "1" CACHE INTERNAL "Have symbol memmove")
set(HAVE_MEMCMP "1" CACHE INTERNAL "Have symbol memcmp")
set(HAVE_STRLEN "1" CACHE INTERNAL "Have symbol strlen")
set(HAVE_STRLCPY "1" CACHE INTERNAL "Have symbol strlcpy")
set(HAVE_STRLCAT "1" CACHE INTERNAL "Have symbol strlcat")
set(HAVE__STRREV "" CACHE INTERNAL "Have symbol _strrev")
set(HAVE__STRUPR "" CACHE INTERNAL "Have symbol _strupr")
set(HAVE__STRLWR "" CACHE INTERNAL "Have symbol _strlwr")
set(HAVE_INDEX "1" CACHE INTERNAL "Have symbol index")
set(HAVE_RINDEX "1" CACHE INTERNAL "Have symbol rindex")
set(HAVE_STRCHR "1" CACHE INTERNAL "Have symbol strchr")
set(HAVE_STRRCHR "1" CACHE INTERNAL "Have symbol strrchr")
set(HAVE_STRSTR "1" CACHE INTERNAL "Have symbol strstr")
set(HAVE_STRTOK_R "1" CACHE INTERNAL "Have symbol strtok_r")
set(HAVE_ITOA "" CACHE INTERNAL "Have symbol itoa")
set(HAVE__LTOA "" CACHE INTERNAL "Have symbol _ltoa")
set(HAVE__UITOA "" CACHE INTERNAL "Have symbol _uitoa")
set(HAVE__ULTOA "" CACHE INTERNAL "Have symbol _ultoa")
set(HAVE_STRTOL "1" CACHE INTERNAL "Have symbol strtol")
set(HAVE_STRTOUL "1" CACHE INTERNAL "Have symbol strtoul")
set(HAVE__I64TOA "" CACHE INTERNAL "Have symbol _i64toa")
set(HAVE__UI64TOA "" CACHE INTERNAL "Have symbol _ui64toa")
set(HAVE_STRTOLL "1" CACHE INTERNAL "Have symbol strtoll")
set(HAVE_STRTOULL "1" CACHE INTERNAL "Have symbol strtoull")
set(HAVE_ATOI "1" CACHE INTERNAL "Have symbol atoi")
set(HAVE_ATOF "1" CACHE INTERNAL "Have symbol atof")
set(HAVE_STRCMP "1" CACHE INTERNAL "Have symbol strcmp")
set(HAVE_STRNCMP "1" CACHE INTERNAL "Have symbol strncmp")
set(HAVE__STRICMP "" CACHE INTERNAL "Have symbol _stricmp")
set(HAVE_STRCASECMP "1" CACHE INTERNAL "Have symbol strcasecmp")
set(HAVE__STRNICMP "" CACHE INTERNAL "Have symbol _strnicmp")
set(HAVE_STRNCASECMP "1" CACHE INTERNAL "Have symbol strncasecmp")
set(HAVE_STRCASESTR "1" CACHE INTERNAL "Have symbol strcasestr")
set(HAVE_WCSCMP "1" CACHE INTERNAL "Have symbol wcscmp")
set(HAVE__WCSDUP "" CACHE INTERNAL "Have symbol _wcsdup")
set(HAVE_WCSDUP "1" CACHE INTERNAL "Have symbol wcsdup")
set(HAVE_WCSLCAT "1" CACHE INTERNAL "Have symbol wcslcat")
set(HAVE_WCSLCPY "1" CACHE INTERNAL "Have symbol wcslcpy")
set(HAVE_WCSLEN "1" CACHE INTERNAL "Have symbol wcslen")
set(HAVE_WCSNCMP "1" CACHE INTERNAL "Have symbol wcsncmp")
set(HAVE_WCSSTR "1" CACHE INTERNAL "Have symbol wcsstr")
set(HAVE_WCSCASECMP "1" CACHE INTERNAL "Have symbol wcscasecmp")
set(HAVE__WCSICMP "" CACHE INTERNAL "Have symbol _wcsicmp")
set(HAVE_WCSNCASECMP "1" CACHE INTERNAL "Have symbol wcsncasecmp")
set(HAVE__WCSNICMP "" CACHE INTERNAL "Have symbol _wcsnicmp")
set(HAVE_SSCANF "1" CACHE INTERNAL "Have symbol sscanf")
set(HAVE_VSSCANF "1" CACHE INTERNAL "Have symbol vsscanf")
set(HAVE_VSNPRINTF "1" CACHE INTERNAL "Have symbol vsnprintf")
set(HAVE_FOPEN64 "" CACHE INTERNAL "Have symbol fopen64")
set(HAVE_FSEEKO "1" CACHE INTERNAL "Have symbol fseeko")
set(HAVE_FSEEKO64 "" CACHE INTERNAL "Have symbol fseeko64")
set(HAVE__EXIT "1" CACHE INTERNAL "Have symbol _Exit")
set(HAVE_SIGACTION "1" CACHE INTERNAL "Have symbol sigaction")
set(HAVE_SETJMP "1" CACHE INTERNAL "Have symbol setjmp")
set(HAVE_NANOSLEEP "1" CACHE INTERNAL "Have symbol nanosleep")
set(HAVE_SYSCONF "1" CACHE INTERNAL "Have symbol sysconf")
set(HAVE_SYSCTLBYNAME "1" CACHE INTERNAL "Have symbol sysctlbyname")
set(HAVE_GETAUXVAL "" CACHE INTERNAL "Have symbol getauxval")
set(HAVE_ELF_AUX_INFO "" CACHE INTERNAL "Have symbol elf_aux_info")
set(HAVE_POLL "1" CACHE INTERNAL "Have symbol poll")
set(HAVE_MEMFD_CREATE "" CACHE INTERNAL "Have symbol memfd_create")
set(HAVE_POSIX_FALLOCATE "" CACHE INTERNAL "Have symbol posix_fallocate")
set(HAVE_LIBM "1" CACHE INTERNAL "Have library m")
set(HAVE_ATAN "1" CACHE INTERNAL "Have symbol atan")
set(HAVE_ATAN2 "1" CACHE INTERNAL "Have symbol atan2")
set(HAVE_ATANF "1" CACHE INTERNAL "Have symbol atanf")
set(HAVE_ATAN2F "1" CACHE INTERNAL "Have symbol atan2f")
set(HAVE_CEIL "1" CACHE INTERNAL "Have symbol ceil")
set(HAVE_CEILF "1" CACHE INTERNAL "Have symbol ceilf")
set(HAVE_COPYSIGN "1" CACHE INTERNAL "Have symbol copysign")
set(HAVE_COPYSIGNF "1" CACHE INTERNAL "Have symbol copysignf")
set(HAVE_COS "1" CACHE INTERNAL "Have symbol cos")
set(HAVE_COSF "1" CACHE INTERNAL "Have symbol cosf")
set(HAVE_EXP "1" CACHE INTERNAL "Have symbol exp")
set(HAVE_EXPF "1" CACHE INTERNAL "Have symbol expf")
set(HAVE_FABS "1" CACHE INTERNAL "Have symbol fabs")
set(HAVE_FABSF "1" CACHE INTERNAL "Have symbol fabsf")
set(HAVE_FLOOR "1" CACHE INTERNAL "Have symbol floor")
set(HAVE_FLOORF "1" CACHE INTERNAL "Have symbol floorf")
set(HAVE_FMOD "1" CACHE INTERNAL "Have symbol fmod")
set(HAVE_FMODF "1" CACHE INTERNAL "Have symbol fmodf")
set(HAVE_LOG "1" CACHE INTERNAL "Have symbol log")
set(HAVE_LOGF "1" CACHE INTERNAL "Have symbol logf")
set(HAVE_LOG10 "1" CACHE INTERNAL "Have symbol log10")
set(HAVE_LOG10F "1" CACHE INTERNAL "Have symbol log10f")
set(HAVE_LROUND "1" CACHE INTERNAL "Have symbol lround")
set(HAVE_LROUNDF "1" CACHE INTERNAL "Have symbol lroundf")
set(HAVE_POW "1" CACHE INTERNAL "Have symbol pow")
set(HAVE_POWF "1" CACHE INTERNAL "Have symbol powf")
set(HAVE_ROUND "1" CACHE INTERNAL "Have symbol round")
set(HAVE_ROUNDF "1" CACHE INTERNAL "Have symbol roundf")
set(HAVE_SCALBN "1" CACHE INTERNAL "Have symbol scalbn")
set(HAVE_SCALBNF "1" CACHE INTERNAL "Have symbol scalbnf")
set(HAVE_SIN "1" CACHE INTERNAL "Have symbol sin")
set(HAVE_SINF "1" CACHE INTERNAL "Have symbol sinf")
set(HAVE_SQRT "1" CACHE INTERNAL "Have symbol sqrt")
set(HAVE_SQRTF "1" CACHE INTERNAL "Have symbol sqrtf")
set(HAVE_TAN "1" CACHE INTERNAL "Have symbol tan")
set(HAVE_TANF "1" CACHE INTERNAL "Have symbol tanf")
set(HAVE_ACOS "1" CACHE INTERNAL "Have symbol acos")
set(HAVE_ACOSF "1" CACHE INTERNAL "Have symbol acosf")
set(HAVE_ASIN "1" CACHE INTERNAL "Have symbol asin")
set(HAVE_ASINF "1" CACHE INTERNAL "Have symbol asinf")
set(HAVE_TRUNC "1" CACHE INTERNAL "Have symbol trunc")
set(HAVE_TRUNCF "1" CACHE INTERNAL "Have symbol truncf")
set(HAVE_SA_SIGACTION "1" CACHE INTERNAL "struct sigaction hash sa_sigaction member")
set(HAVE_DLOPEN_IN_LIBC "1" CACHE INTERNAL "Have symbol dlopen")
set(HAVE_O_CLOEXEC "1" CACHE INTERNAL "Test HAVE_O_CLOEXEC")
set(HAVE_PTHREADS "1" CACHE INTERNAL "Test HAVE_PTHREADS")
set(HAVE_RECURSIVE_MUTEXES "1" CACHE INTERNAL "Test HAVE_RECURSIVE_MUTEXES")
set(HAVE_PTHREADS_SEM "1" CACHE INTERNAL "Test HAVE_PTHREADS_SEM")
set(HAVE_SEM_TIMEDWAIT "" CACHE INTERNAL "Test HAVE_SEM_TIMEDWAIT")
set(HAVE_PTHREAD_H "1" CACHE INTERNAL "Have include pthread.h")
set(HAVE_PTHREAD_NP_H "" CACHE INTERNAL "Have include pthread_np.h")
set(HAVE_PTHREAD_SETNAME_NP "1" CACHE INTERNAL "Test HAVE_PTHREAD_SETNAME_NP")
set(COMPILER_SUPPORTS_FOBJC_ARC "1" CACHE INTERNAL "Test COMPILER_SUPPORTS_FOBJC_ARC")
